@base <https://github.com/stefanwert/InzenjeringZnanja_Project> .
@prefix xsd: <http://w3.org/2001/XWLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

<#ForcedDeadlock> a foaf:Attack;
	foaf:name "Forced Deadlock"^^xsd:string;
	foaf:parent_of "None"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software"^^xsd:string;
	foaf:mitigations "Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms)., For competing actions use well-known libraries which implement synchronization."^^xsd:string;
	foaf:weaknesses "Unrestricted Externally Accessible Lock, Unsynchronized Access to Shared Data in a Multithreaded Context, Improper Synchronization, Improper Locking, Deadlock, Use of Blocking Code in Single-threaded, Non-blocking Context"^^xsd:string.

<#LeveragingRaceConditions> a foaf:Attack;
	foaf:name "Leveraging Race Conditions"^^xsd:string;
	foaf:parent_of "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software, Hardware"^^xsd:string;
	foaf:mitigations "Use safe libraries to access resources such as files., Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition., Use synchronization to control the flow of execution., Use static analysis tools to find race conditions., Pay attention to concurrency problems related to the access of resources."^^xsd:string;
	foaf:weaknesses "Context Switching Race Condition, Race Condition Enabling Link Following, Race Condition within a Thread, Missing Check for Certificate Revocation after Initial Check, Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'), Improper Synchronization, Permission Race Condition During Resource Copy, Improper Locking, Improper Initialization, Race Condition for Write-Once Attributes"^^xsd:string.

<#ManipulatingState> a foaf:Attack;
	foaf:name "Manipulating State"^^xsd:string;
	foaf:parent_of "Bypassing of Intermediate Forms in Multiple-Form Sets"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software, Hardware"^^xsd:string;
	foaf:mitigations "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state., Avoid sensitive information, such as usernames or authentication and authorization information in user-controllable locations., Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request., All possible states must be handled by hardware finite state machines."^^xsd:string;
	foaf:weaknesses "Incomplete Internal State Distinction, State Issues, Cleartext Storage of Sensitive Information in a Cookie, Missing Support for Integrity Check, Protection Mechanism Failure, Improper Finite State Machines (FSMs) in Hardware Logic, Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls, Unitialized Value on Reset for Registers Holding Security Settings"^^xsd:string.

<#InterfaceManipulation> a foaf:Attack;
	foaf:name "Interface Manipulation"^^xsd:string;
	foaf:parent_of "Using Unpublished Interfaces, Exploit Non-Production Interfaces, Try All Common Switches, Exploit Script-Based APIs"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software, Hardware"^^xsd:string;
	foaf:mitigations "None"^^xsd:string;
	foaf:weaknesses "7PK - API Abuse, System-on-Chip (SoC) Using Components without Unique - Immutable Identifiers"^^xsd:string.

<#Flooding> a foaf:Attack;
	foaf:name "Flooding"^^xsd:string;
	foaf:parent_of "TCP Flood, UDP Flood, ICMP Flood, HTTP Flood, SSL Flood, Amplification, XML Flood"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software, Communications"^^xsd:string;
	foaf:mitigations "Ensure that protocols have specific limits of scale configured., Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits., Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed."^^xsd:string;
	foaf:weaknesses "Improper Resource Shutdown or Release, Allocation of Resources Without Limits or Throttling"^^xsd:string.

<#ExcessiveAllocation> a foaf:Attack;
	foaf:name "Excessive Allocation"^^xsd:string;
	foaf:parent_of "XML Nested Payloads, Oversized Serialized Data Payloads, Regular Expression Exponential Blowup, SOAP Array Blowup, TCP Fragmentation, UDP Fragmentation, ICMP Fragmentation"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software, Communications"^^xsd:string;
	foaf:mitigations "Limit the amount of resources that are accessible to unprivileged users., Assume all input is malicious. Consider all potentially relevant properties when validating input., Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed., Use resource-limiting settings, if possible."^^xsd:string;
	foaf:weaknesses "Improper Resource Shutdown or Release, Allocation of Resources Without Limits or Throttling, Improperly Controlled Sequential Memory Allocation"^^xsd:string.

<#ResourceLeakExposure> a foaf:Attack;
	foaf:name "Resource Leak Exposure"^^xsd:string;
	foaf:parent_of "None"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software"^^xsd:string;
	foaf:mitigations "If possible leverage coding language(s) that do not allow this weakness to occur (e.g. Java and Ruby and Python all perform automatic garbage collection that releases memory for objects that have been deallocated)., Memory should always be allocated/freed using matching functions (e.g. malloc/free or new/delete and etc.), Implement best practices with respect to memory management including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function."^^xsd:string;
	foaf:weaknesses "Improper Resource Shutdown or Release"^^xsd:string.

<#FunctionalityMisuse> a foaf:Attack;
	foaf:name "Functionality Misuse"^^xsd:string;
	foaf:parent_of "Inducing Account Lockout, Passing Local Filenames to Functions That Expect a URL, Password Recovery Exploitation, JSON Hijacking (aka JavaScript Hijacking), Drop Encryption Level"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software, Hardware"^^xsd:string;
	foaf:mitigations "Perform comprehensive threat modeling and a process of identifying and evaluating and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes., When implementing security features, consider how they can be misused and compromised."^^xsd:string;
	foaf:weaknesses "Inclusion of Undocumented Features or Chicken Bits, Sequence of Processor Instructions Leads to Unexpected Behavior (Halt and Catch Fire)"^^xsd:string.

<#CommunicationChannelManipulation> a foaf:Attack;
	foaf:name "Communication Channel Manipulation"^^xsd:string;
	foaf:parent_of "Choosing Message Identifier, Exploiting Incorrectly Configured SSL"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Communications"^^xsd:string;
	foaf:mitigations "Encrypt all sensitive communications using properly-configured cryptography., Design the communication system such that it associates proper authentication/authorization with each channel/message."^^xsd:string;
	foaf:weaknesses "None"^^xsd:string.

<#SustainedClientEngagement> a foaf:Attack;
	foaf:name "Sustained Client Engagement"^^xsd:string;
	foaf:parent_of "HTTP DoS"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software"^^xsd:string;
	foaf:mitigations "Potential mitigations include requiring a unique login for each resource request constraining local unprivileged access by disallowing simultaneous engagements of the resource or limiting access to the resource to one access per IP address. In such scenarios the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses."^^xsd:string;
	foaf:weaknesses "None"^^xsd:string.

<#ProtocolManipulation> a foaf:Attack;
	foaf:name "Protocol Manipulation"^^xsd:string;
	foaf:parent_of "Reflection Attack in Authentication Protocol, Client-Server Protocol Manipulation, Inter-component Protocol Manipulation, Data Interchange Protocol Manipulation, Web Services Protocol Manipulation"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Sofware, Communications"^^xsd:string;
	foaf:mitigations "None"^^xsd:string;
	foaf:weaknesses "None"^^xsd:string.

<#FunctionalityBypass> a foaf:Attack;
	foaf:name "Functionality Bypass"^^xsd:string;
	foaf:parent_of "Calling Micro-Services Directly, Evercookie, Transparent Proxy Abuse"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software"^^xsd:string;
	foaf:mitigations "None"^^xsd:string;
	foaf:weaknesses "Improper Protection of Alternate Path"^^xsd:string.

<#Fuzzing> a foaf:Attack;
	foaf:name "Fuzzing"^^xsd:string;
	foaf:parent_of "Fuzzing for application mapping"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software"^^xsd:string;
	foaf:mitigations "Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made., Use fuzz testing during the software QA process to uncover any surprises uncover any assumptions or unexpected behavior."^^xsd:string;
	foaf:weaknesses "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'), 7PK - Errors, Improper Input Validation"^^xsd:string.

<#BruteForce> a foaf:Attack;
	foaf:name "Brute Force"^^xsd:string;
	foaf:parent_of "Encryption Brute Forcing, Password Brute Forcing"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software"^^xsd:string;
	foaf:mitigations "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space., Use a secret space that is well known and with no known patterns that may reduce functional size., Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally such as with a transmitted cryptotext."^^xsd:string;
	foaf:weaknesses "Use of Insufficiently Random Values, Inadequate Encryption Strength, Weak Password Requirements"^^xsd:string.

<#BufferManipulation> a foaf:Attack;
	foaf:name "BufferManipulation"^^xsd:string;
	foaf:parent_of "Overflow Buffers, Overread Buffers"^^xsd:string;
	foaf:can_follow "None"^^xsd:string;
	foaf:domains_of_attacks "Software"^^xsd:string;
	foaf:mitigations "To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g. Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g. C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used - make sure that proper boundary checking is performed. Additionally there are often a number of compiler-based mechanisms (e.g. StackGuard and ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally - there may be operating system level preventative functionality that can be applied."^^xsd:string;
	foaf:weaknesses "Improper Restriction of Operations within the Bounds of a Memory Buffer"^^xsd:string.